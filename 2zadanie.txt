<?php
/**
 * Задача №2 - Оптимизация MySQL запросов и таблиц
 * 
 * Анализ и оптимизация запроса для получения данных из трех таблиц:
 * info, data, link
 * 
 * @author Your Name
 * @version 1.0
 */

/**
 * Класс для демонстрации оптимизации MySQL запросов
 */
final class QueryOptimizer
{
    /** @var PDO|null Объект соединения с базой данных */
    private $pdo = null;
    
    /** @var string Хост базы данных */
    private $host = '127.0.0.1';
    
    /** @var int Порт базы данных */
    private $port = 3306;
    
    /** @var string Имя пользователя базы данных */
    private $username = 'root';
    
    /** @var string Пароль базы данных */
    private $password = 'grisha2003';
    
    /** @var string Название базы данных */
    private $database = 'testdb';

    /**
     * Конструктор класса
     * Создает таблицы и заполняет их тестовыми данными
     *
     * @access public
     * @throws Exception
     */
    public function __construct()
    {
        try {
            $this->connect();
            $this->createTables();
            $this->fillTables();
        } catch (Exception $e) {
            throw new Exception("Ошибка инициализации: " . $e->getMessage());
        }
    }

    /**
     * Устанавливает соединение с базой данных MySQL
     *
     * @access private
     * @return void
     * @throws Exception
     */
    private function connect(): void
    {
        if ($this->pdo === null) {
            try {
                $dsn = "mysql:host={$this->host};port={$this->port};dbname={$this->database};charset=utf8mb4";
                $this->pdo = new PDO($dsn, $this->username, $this->password);
                $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            } catch (PDOException $e) {
                throw new Exception("Ошибка подключения к базе данных: " . $e->getMessage());
            }
        }
    }

    /**
     * Создает таблицы info, data, link с оптимизированной структурой
     *
     * @access private
     * @return void
     * @throws Exception
     */
    private function createTables(): void
    {
        $this->pdo->exec("DROP TABLE IF EXISTS link");
        $this->pdo->exec("DROP TABLE IF EXISTS info");
        $this->pdo->exec("DROP TABLE IF EXISTS data");

        $sql = "CREATE TABLE `info` (
            `id` int(11) NOT NULL AUTO_INCREMENT,
            `name` varchar(255) NOT NULL,
            `desc` text,
            PRIMARY KEY (`id`),
            KEY `idx_name` (`name`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
        
        $this->pdo->exec($sql);

        $sql = "CREATE TABLE `data` (
            `id` int(11) NOT NULL AUTO_INCREMENT,
            `date` date NOT NULL,
            `value` int(11) NOT NULL,
            PRIMARY KEY (`id`),
            KEY `idx_date` (`date`),
            KEY `idx_value` (`value`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
        
        $this->pdo->exec($sql);

        $sql = "CREATE TABLE `link` (
            `data_id` int(11) NOT NULL,
            `info_id` int(11) NOT NULL,
            PRIMARY KEY (`data_id`, `info_id`),
            KEY `idx_info_id` (`info_id`),
            KEY `idx_data_id` (`data_id`),
            CONSTRAINT `fk_link_data` FOREIGN KEY (`data_id`) REFERENCES `data` (`id`) ON DELETE CASCADE,
            CONSTRAINT `fk_link_info` FOREIGN KEY (`info_id`) REFERENCES `info` (`id`) ON DELETE CASCADE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
        
        $this->pdo->exec($sql);

        echo "Таблицы созданы с оптимизациями\n";
    }

    /**
     * Заполняет таблицы тестовыми данными
     *
     * @access private
     * @return void
     * @throws Exception
     */
    private function fillTables(): void
    {
        $infoNames = ['Продукт A', 'Продукт B', 'Продукт C', 'Продукт D', 'Продукт E'];
        $infoDescs = ['Описание продукта A', 'Описание продукта B', 'Описание продукта C', 'Описание продукта D', 'Описание продукта E'];
        
        $stmt = $this->pdo->prepare("INSERT INTO info (name, `desc`) VALUES (?, ?)");
        for ($i = 0; $i < 5; $i++) {
            $stmt->execute([$infoNames[$i], $infoDescs[$i]]);
        }

        $stmt = $this->pdo->prepare("INSERT INTO data (date, value) VALUES (?, ?)");
        for ($i = 0; $i < 10; $i++) {
            $date = date('Y-m-d', strtotime("-$i days"));
            $value = rand(100, 1000);
            $stmt->execute([$date, $value]);
        }

        $stmt = $this->pdo->prepare("INSERT INTO link (data_id, info_id) VALUES (?, ?)");
        for ($i = 1; $i <= 10; $i++) {
            $infoId = rand(1, 5);
            $stmt->execute([$i, $infoId]);
        }

        echo "Таблицы заполнены тестовыми данными\n";
    }

    /**
     * Выполняет исходный запрос (неоптимизированный)
     *
     * @access public
     * @return array
     * @throws Exception
     */
    public function executeOriginalQuery(): array
    {
        $sql = "SELECT * FROM data, link, info WHERE link.info_id = info.id AND link.data_id = data.id";
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Выполняет оптимизированный запрос с использованием JOIN
     *
     * @access public
     * @return array
     * @throws Exception
     */
    public function executeOptimizedQuery(): array
    {
        $sql = "SELECT d.id as data_id, d.date, d.value, 
                       i.id as info_id, i.name, i.desc
                FROM data d
                INNER JOIN link l ON d.id = l.data_id
                INNER JOIN info i ON l.info_id = i.id
                ORDER BY d.date DESC, i.name";
        
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Показывает план выполнения запроса
     *
     * @access public
     * @param string $sql SQL запрос для анализа
     * @return array
     * @throws Exception
     */
    public function showQueryPlan(string $sql): array
    {
        $stmt = $this->pdo->prepare("EXPLAIN " . $sql);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Деструктор класса
     */
    public function __destruct()
    {
        $this->pdo = null;
    }
}

try {
    echo "=== Задача №2 - Оптимизация MySQL запросов ===\n\n";
    
    $optimizer = new QueryOptimizer();
    
    echo "=== АНАЛИЗ ИСХОДНОГО ЗАПРОСА ===\n";
    echo "Исходный запрос: SELECT * FROM data, link, info WHERE link.info_id = info.id AND link.data_id = data.id\n\n";
    
    echo "План выполнения исходного запроса:\n";
    $originalPlan = $optimizer->showQueryPlan("SELECT * FROM data, link, info WHERE link.info_id = info.id AND link.data_id = data.id");
    foreach ($originalPlan as $row) {
        echo "Таблица: {$row['table']}, Тип: {$row['type']}, Ключи: {$row['key']}, Строк: {$row['rows']}\n";
    }
    
    echo "\n=== РЕЗУЛЬТАТ ИСХОДНОГО ЗАПРОСА ===\n";
    $originalResult = $optimizer->executeOriginalQuery();
    echo "Найдено записей: " . count($originalResult) . "\n";
    foreach (array_slice($originalResult, 0, 3) as $row) {
        echo "Data ID: {$row['id']}, Date: {$row['date']}, Value: {$row['value']}, Name: {$row['name']}\n";
    }
    
    echo "\n=== ОПТИМИЗИРОВАННЫЙ ЗАПРОС ===\n";
    echo "Оптимизированный запрос: SELECT d.id as data_id, d.date, d.value, i.id as info_id, i.name, i.desc FROM data d INNER JOIN link l ON d.id = l.data_id INNER JOIN info i ON l.info_id = i.id ORDER BY d.date DESC, i.name\n\n";
    
    echo "План выполнения оптимизированного запроса:\n";
    $optimizedPlan = $optimizer->showQueryPlan("SELECT d.id as data_id, d.date, d.value, i.id as info_id, i.name, i.desc FROM data d INNER JOIN link l ON d.id = l.data_id INNER JOIN info i ON l.info_id = i.id ORDER BY d.date DESC, i.name");
    foreach ($optimizedPlan as $row) {
        echo "Таблица: {$row['table']}, Тип: {$row['type']}, Ключи: {$row['key']}, Строк: {$row['rows']}\n";
    }
    
    echo "\n=== РЕЗУЛЬТАТ ОПТИМИЗИРОВАННОГО ЗАПРОСА ===\n";
    $optimizedResult = $optimizer->executeOptimizedQuery();
    echo "Найдено записей: " . count($optimizedResult) . "\n";
    foreach (array_slice($optimizedResult, 0, 3) as $row) {
        echo "Data ID: {$row['data_id']}, Date: {$row['date']}, Value: {$row['value']}, Name: {$row['name']}\n";
    }
    
    echo "\n=== РЕКОМЕНДАЦИИ ПО ОПТИМИЗАЦИИ ===\n";
    echo "1. ИСПОЛЬЗОВАНИЕ INNER JOIN вместо WHERE для связей таблиц\n";
    echo "2. ДОБАВЛЕНИЕ ИНДЕКСОВ на внешние ключи (data_id, info_id)\n";
    echo "3. ПЕРЕХОД с MyISAM на InnoDB для поддержки внешних ключей\n";
    echo "4. ИСПОЛЬЗОВАНИЕ utf8mb4 вместо cp1251 для лучшей поддержки Unicode\n";
    echo "5. ДОБАВЛЕНИЕ ИНДЕКСОВ на часто используемые поля (date, value, name)\n";
    echo "6. ЯВНОЕ УКАЗАНИЕ полей вместо SELECT *\n";
    echo "7. ДОБАВЛЕНИЕ ORDER BY для предсказуемого порядка результатов\n";
    
} catch (Exception $e) {
    echo "Ошибка: " . $e->getMessage() . "\n";
} 